"""
Este módulo está diseñado para interactuar con Amazon DynamoDB para almacenar y gestionar respuestas
de un chatbot. El módulo utiliza la biblioteca boto3 para crear un cliente de DynamoDB, permitiendo 
manipular los datos de las respuestas de intenciones del chatbot.

La función principal, lambda_handler, se encarga de cargar múltiples entradas en la tabla de DynamoDB 
para respuestas estándar a preguntas frecuentes y para gestionar el flujo de un tutorial paso a paso.
Cada entrada define la intención, la pregunta y la respuesta correspondiente, facilitando así la 
retrieval rápida durante las interacciones del chatbot.

Funcionalidades:
- Cargar respuestas estándar y pasos de tutorial en DynamoDB.
- Gestionar errores y excepciones durante la carga de datos para asegurar la estabilidad del sistema.
- Proveer un punto de integración simple para funciones Lambda que necesitan acceso a las respuestas del chatbot.

Este módulo es utilizado típicamente en conjunción con AWS Lambda para procesar eventos que requieren 
interacciones dinámicas basadas en contenido predefinido almacenado en DynamoDB.
"""
import boto3

# Conectar con DynamoDB
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('ChatbotResponses')

def lambda_handler(event, context):
    """
    Función que carga los campos en la base de datos
    
    Parámetros:
    - event: El evento desencadenado.
    - context: Contexto de la ejecución de la Lambda (no se usa en este caso).
    Ninguno de los dos es necesario para usarlo.

    """
    try:
        responses = [
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué es un rol IAM?", "Response": "Un rol IAM (Identity and Access Management) es una entidad que define un conjunto de permisos para realizar acciones en AWS. Un rol no está asociado a un usuario o grupo específico y puede ser asumido por cualquier entidad que necesite los permisos definidos."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Cómo se crea un rol IAM?", "Response": "Para crear un rol en IAM, accede al servicio IAM en la consola de AWS, selecciona 'Roles' y haz clic en 'Create role'. Luego, sigue los pasos para definir la entidad de confianza y asignar permisos."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué permisos necesita un rol para trabajar con S3?", "Response": "Un rol que trabaja con S3 necesita permisos como AmazonS3FullAccess, que permite realizar acciones en los recursos de S3."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué permisos necesita un rol para trabajar con Textract?", "Response": "Un rol que trabaja con Textract necesita permisos como AmazonTextractFullAccess, que permite realizar acciones en los recursos de Textract."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué es una entidad de confianza en IAM?", "Response": "Una entidad de confianza es una entidad que puede asumir el rol. Puede ser un servicio de AWS como Lambda, una cuenta de AWS, un usuario federado, etc."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué es el caso de uso Lambda en IAM?", "Response": "El caso de uso Lambda en IAM se refiere a configurar un rol que puede ser asumido por funciones de AWS Lambda. Este caso de uso permite a Lambda ejecutar funciones con los permisos especificados en el rol."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Qué permisos necesito para crear el entorno?", "Response": "Necesitas: AmazonS3FullAccess, AmazonTextractFullAccess, AWSLambdaExecute, AWSLambdaSNSFullAccess, AmazonS3ObjectLambdaExecutionRolePolicy, AmazonSNSFullAccess, AmazonTextractServiceRole."},
            {"IntentName": "CreacionRolIAM", "Question": "¿Dónde va cada rol y en qué función?", "Response": "El rol AWS_PDF_Textract_Lex_Role, el primero, va en las dos primeras funciones, las que extraen el texto del PDF. El rol AWS_Lambda_LexIntegration, el segundo que has creado, va en la tercera función, la que interactúa con Lex."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Qué es un bucket S3?", "Response": "Un bucket S3 es un contenedor de objetos en Amazon S3 (Simple Storage Service). Puedes almacenar cualquier número de objetos en un bucket."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Cómo se crea un bucket en S3?", "Response": "Para crear un bucket en S3, accede al servicio Amazon S3 en la consola de AWS, haz clic en 'Create bucket', elige un nombre único y configura las opciones según tus necesidades."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Qué son las carpetas en S3?", "Response": "Las carpetas en S3 son una manera de organizar los objetos dentro de un bucket. Aunque S3 es un almacenamiento plano, las carpetas se utilizan para simular una estructura jerárquica."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Cómo se crean carpetas en S3?", "Response": "Para crear carpetas en S3, accede a tu bucket, selecciona 'Create folder', ingresa el nombre de la carpeta y guarda los cambios."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Cuál es la configuración más segura para un bucket S3?", "Response": "La configuración más segura para un bucket S3 implica habilitar el cifrado de objetos, restringir el acceso público, habilitar el registro de acceso y aplicar políticas de acceso específicas."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Qué hace cada carpeta?", "Response": "Una carpeta es donde se suben los pdf con el texto a extraer, la otra es donde se sube el txt con el texto ya extraído y tratado."},
            {"IntentName": "CreacionBucketS3", "Question": "¿Cuántos buckets necesito crear?", "Response": "Simplemente uno, ya que la función que se encarga de recoger el pdf desde la primera carpeta tiene configurado los sufijos y prefijos."},
            {"IntentName": "CrearSNS", "Question": "¿Qué es SNS?", "Response": "SNS (Simple Notification Service) es un servicio de mensajería de AWS que coordina y administra la entrega o el envío de notificaciones a suscriptores o endpoints."},
            {"IntentName": "CrearSNS", "Question": "¿Cómo se crea un tema en SNS?", "Response": "Para crear un tema en SNS, accede al servicio SNS en la consola de AWS, haz clic en 'Create topic', elige un nombre y tipo de tema, y configura las opciones."},
            {"IntentName": "CrearSNS", "Question": "¿Qué es un tema estándar en SNS?", "Response": "Un tema estándar en SNS permite el envío de mensajes a múltiples suscriptores con un mecanismo de entrega 'al menos una vez' (at least once) y sin orden de entrega garantizado."},
            {"IntentName": "CrearSNS", "Question": "¿Qué es un endpoint en SNS?", "Response": "Un endpoint en SNS es un destino al que se envían los mensajes, como una dirección de correo electrónico, un número de teléfono (para SMS) o una URL HTTP/S."},
            {"IntentName": "CrearSNS", "Question": "¿Cómo se suscriben los endpoints a un tema de SNS?", "Response": "Para suscribir endpoints a un tema de SNS, accede al tema, selecciona 'Create subscription', elige el protocolo (email, SMS, HTTP, etc.) y proporciona el endpoint."},
            {"IntentName": "CrearSNS", "Question": "¿Para qué necesito crear un tema SNS?", "Response": "Para coordinar y administrar la entrega de notificaciones a múltiples suscriptores."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es AWS Lambda?", "Response": "AWS Lambda es un servicio de computación sin servidor que ejecuta código en respuesta a eventos y administra automáticamente los recursos de computación."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se crea una función Lambda?", "Response": "Para crear una función Lambda, accede al servicio Lambda en la consola de AWS, haz clic en 'Create function', elige crear desde cero, proporciona un nombre y elige el tiempo de ejecución (como Python), luego configura los permisos."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es un desencadenador en Lambda?", "Response": "Un desencadenador (trigger) es una fuente de eventos que invoca la función Lambda. Puede ser un bucket S3, un tema SNS, una tabla DynamoDB, entre otros."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se configura un desencadenador S3 para una función Lambda?", "Response": "Para configurar un desencadenador S3, accede a la función Lambda, selecciona 'Add trigger', elige S3, especifica el bucket y los filtros de prefijo y sufijo, y guarda los cambios."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es el almacenamiento efímero en Lambda?", "Response": "El almacenamiento efímero en Lambda es el espacio de disco temporal proporcionado a cada instancia de ejecución de la función, que se utiliza para almacenar datos temporales durante la ejecución del código."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es el tiempo de espera (timeout) en Lambda?", "Response": "El tiempo de espera (timeout) en Lambda define el tiempo máximo que una función puede ejecutarse antes de ser terminada por el servicio. Puedes configurar este tiempo según las necesidades de tu función."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es la informática sin servidores?", "Response": "La informática sin servidor permite crear y ejecutar aplicaciones y servicios sin tener que preocuparse de los servidores. Con la informática sin servidor, su aplicación continúa ejecutándose en servidores, pero AWS se encarga de administrarlos. En el corazón de la informática sin servidores se encuentra AWS Lambda, que le permite ejecutar su código sin aprovisionar ni administrar servidores."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué eventos puede activar una función de AWS Lambda?", "Response": "Los eventos más destacados que pueden activar una función Lambda incluyen: S3, SQS, SNS y Lex."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué lenguajes admite AWS Lambda?", "Response": "AWS Lambda admite varios lenguajes de programación, incluyendo Python, Node.js, Java, C#, Go, Ruby, y PowerShell."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se configura el rol de ejecución para una función Lambda?", "Response": "Al crear una función Lambda, se debe asociar un rol de ejecución IAM que otorga los permisos necesarios para que la función acceda a otros servicios de AWS. Esto se configura en la sección de permisos de la consola Lambda."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se gestiona el versionado en AWS Lambda?", "Response": "AWS Lambda permite gestionar versiones de una función. Cada vez que publiques una nueva versión, se crea una copia inmutable del código y la configuración. También se pueden crear alias que apunten a versiones específicas."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es una variable de entorno en Lambda?", "Response": "Las variables de entorno en Lambda permiten pasar configuraciones y datos sensibles a la función sin hardcodear estos valores en el código fuente. Se configuran en la sección de configuración, variables de entorno de la función."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo configuro variables de entorno en Lambda?", "Response": "Accede a la parte de configuración de la función lambda. Selecciona variables de entorno y “editar”. Introduce como quieres llamar a esa variable de entorno y el texto correspondiente, no es necesario que lo introduzcas entre comillas."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se monitorea una función Lambda?", "Response": "AWS Lambda se integra con Amazon CloudWatch para monitorear el rendimiento y los logs de la función. Puedes configurar alarmas y revisar métricas como invocaciones, duración, errores y límites superados."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Cómo se actualiza el código de una función Lambda?", "Response": "El código de una función Lambda se puede actualizar a través de la consola de AWS, la CLI de AWS, o mediante herramientas de integración y entrega continua como AWS CodePipeline."},
            {"IntentName": "CrearFuncionLambda", "Question": "¿Qué es la limitación de concurrencia en AWS Lambda?", "Response": "La limitación de concurrencia controla el número máximo de instancias simultáneas de una función Lambda que pueden ejecutarse en un momento dado. Puedes establecer límites para garantizar que tu función no consuma demasiados recursos y afecte a otros servicios."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "Explicame la primera función Lambda", "Response": "Esta función Lambda inicia el análisis de texto de un documento almacenado en un bucket de S3 utilizando AWS Textract y notifica el estado del análisis a un tema de SNS. Importa las bibliotecas necesarias y configura las variables de entorno para el ARN del tema de SNS y el ARN del rol. La función StartTextractDocumentAnalysis recibe el nombre del bucket S3 y la clave del objeto S3, e inicia el análisis del documento con AWS Textract, configurando la notificación para el tema de SNS utilizando los ARN proporcionados. Retorna el ID del trabajo de Textract si el análisis se inicia correctamente, o False si hay un error. La función principal lambda_handler recibe el evento y el contexto de la función Lambda, extrae el nombre del bucket S3 y la clave del objeto S3 del evento (generalmente proveniente de un trigger de S3), y llama a StartTextractDocumentAnalysis para iniciar el análisis del documento. Finalmente, retorna el ID del trabajo si el análisis se inicia con éxito, o False si hay un error."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué servicio de AWS utiliza esta función Lambda para analizar documentos?", "Response": "Utiliza AWS Textract para analizar documentos."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué variables de entorno se deben configurar para que funcione correctamente esta función Lambda?", "Response": "Se deben configurar las variables de entorno SNSTopicArn y roleArn."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué parámetros recibe la función StartTextractDocumentAnalysis?", "Response": "Recibe los parámetros s3_bucket (nombre del bucket de S3) y s3_key (clave del objeto en el bucket de S3)."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué es s3_bucket en la función Lambda?", "Response": "s3_bucket es el nombre del bucket de Amazon S3 donde se encuentra almacenado el documento que se va a analizar."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué es s3_key en la función Lambda?", "Response": "s3_key es la clave del objeto en el bucket de Amazon S3 que apunta al documento específico que se va a analizar."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué acciones realiza la función StartTextractDocumentAnalysis?", "Response": "Inicia un análisis de texto en un documento almacenado en S3 utilizando AWS Textract y configura la notificación del estado a un tema de SNS."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo se estructura la notificación de canal en la función StartTextractDocumentAnalysis?", "Response": "Utiliza el ARN del tema de SNS (SNSTopicArn) y el ARN del rol (roleArn) para configurar la notificación de canal."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "Explicame la segunda función Lambda", "Response": "Esta función Lambda detecta el idioma del texto extraído y, si es necesario, lo traduce al español utilizando AWS Comprehend y AWS Translate, respectivamente. Luego, sube el texto traducido a un bucket de S3. La función maneja errores mediante bloques try-except y utiliza variables de entorno para configurar el bucket de S3."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué servicio de AWS se utiliza para detectar el idioma del texto?", "Response": "AWS Comprehend."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo maneja la función los errores al detectar el idioma?", "Response": "Utiliza un bloque try-except para capturar excepciones y elevarlas si ocurre un error."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué hace la función translate_content?", "Response": "Traduce el texto al español si el idioma predominante no es español."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué parámetros recibe la función translate_content?", "Response": "Recibe un parámetro text que contiene el texto a traducir."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué servicio de AWS se utiliza para traducir el contenido?", "Response": "AWS Translate."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué devuelve translate_content si el idioma del texto ya es español?", "Response": "Devuelve el texto original sin traducir."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo se detecta el idioma predominante del texto en detect_language?", "Response": "Utiliza la función detect_dominant_language de AWS Comprehend."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué hace la función lambda_handler con el mensaje recibido de SNS?", "Response": "Procesa el mensaje para extraer el ID del trabajo de Textract y verifica su estado."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué ocurre si el estado del trabajo de Textract no es 'SUCCEEDED'?", "Response": "La función devuelve un estado HTTP 400 y un mensaje de error."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué hace la función process_Response?", "Response": "Procesa la respuesta de Textract para obtener el texto detectado en las diferentes páginas del documento."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo maneja process_Response la paginación de resultados en Textract?", "Response": "Utiliza un bucle while para iterar a través de las páginas de resultados utilizando NextToken."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué estructura de datos utiliza process_Response para almacenar el texto detectado?", "Response": "Utiliza un diccionario que organiza el texto por páginas y columnas."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué hace la función combinar_columnas?", "Response": "Combina el texto de las columnas izquierda y derecha de cada página."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo se organiza el texto extraído antes de combinarlo en combinar_columnas?", "Response": "Se organiza en listas separadas para cada columna (izquierda y derecha) por página."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué hace lambda_handler después de traducir el contenido?", "Response": "Guarda el texto traducido en un archivo y lo sube a un bucket de S3."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo sube lambda_handler el archivo a S3?", "Response": "Utiliza la función upload_file del cliente S3 de boto3."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué se especifica en las variables de entorno de esta función Lambda?", "Response": "El nombre del bucket de S3 (BUCKET_NAME)."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué ocurre si hay una excepción en lambda_handler?", "Response": "La función imprime el error y devuelve un estado HTTP 500 con un mensaje de error."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Cómo maneja translate_content los errores durante la traducción?", "Response": "Utiliza un bloque try-except para capturar excepciones y manejarlas imprimiendo un mensaje de error."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "¿Qué función se llama primero en lambda_handler después de verificar el estado del trabajo de Textract?", "Response": "process_Response para obtener el texto detectado por Textract."},
            {"IntentName": "ExplicacionFuncionesLambda", "Question": "Explicame la tercera función Lambda", "Response": "Esta función Lambda procesa los resultados del análisis de Textract, organiza el texto extraído y guarda los resultados en un formato estructurado. Utiliza AWS Comprehend para analizar el contenido y AWS Translate para traducirlo si es necesario."},
            {"IntentName": "Textract", "Question": "¿Qué es AWS Textract?", "Response": "AWS Textract es un servicio de AWS que utiliza aprendizaje automático para extraer texto, datos y otros contenidos de documentos escaneados, tales como formularios y tablas."},
            {"IntentName": "Textract", "Question": "¿Qué tipos de documentos puede procesar AWS Textract?", "Response": "AWS Textract puede procesar documentos en formato de imagen (como JPEG, PNG) y documentos PDF."},
            {"IntentName": "Textract", "Question": "¿Qué diferencia hay entre start_document_text_detection y start_document_analysis en Textract?", "Response": "start_document_text_detection se usa para extraer texto simple de documentos, mientras que start_document_analysis se usa para extraer texto y también analizar formularios y tablas."},
            {"IntentName": "Textract", "Question": "¿Cómo se inicia un trabajo de detección de texto en Textract?", "Response": "Se inicia un trabajo utilizando la función start_document_text_detection, proporcionando la ubicación del documento en S3 y opcionalmente un canal de notificación para los resultados."},
            {"IntentName": "Textract", "Question": "¿Qué es el JobId en AWS Textract?", "Response": "El JobId es un identificador único que AWS Textract devuelve cuando se inicia un trabajo de análisis de documentos, utilizado para consultar el estado y los resultados del trabajo."},
            {"IntentName": "Textract", "Question": "¿Qué tipos de bloques devuelve AWS Textract en su análisis?", "Response": "AWS Textract devuelve varios tipos de bloques, incluyendo PAGE, LINE, WORD, TABLE, CELL, y KEY_VALUE_SET."},
            {"IntentName": "Textract", "Question": "¿Cómo se manejan los documentos con múltiples páginas en AWS Textract?", "Response": "Para documentos de múltiples páginas, Textract devuelve resultados paginados y puede usar NextToken para recuperar todas las páginas de resultados."},
            {"IntentName": "Textract", "Question": "¿Qué es el NextToken y cómo se utiliza en Textract?", "Response": "NextToken es un token que indica que hay más resultados disponibles para una operación de Textract y se utiliza para obtener la siguiente página de resultados."},
            {"IntentName": "Textract", "Question": "¿Cómo se reciben notificaciones sobre el estado de un trabajo de Textract?", "Response": "Se pueden configurar notificaciones mediante Amazon SNS para recibir actualizaciones sobre el estado de los trabajos de Textract."},
            {"IntentName": "Textract", "Question": "¿Qué es la DocumentLocation en una solicitud a Textract?", "Response": "DocumentLocation es un parámetro que especifica la ubicación del documento en S3 que se va a procesar. Incluye el nombre del bucket y la clave del objeto en S3."},
            {"IntentName": "Textract", "Question": "¿Cuál es la principal diferencia entre las operaciones síncronas y asíncronas en AWS Textract?", "Response": "Las operaciones síncronas devuelven los resultados inmediatamente en la respuesta de la solicitud, mientras que las operaciones asíncronas inician un trabajo que se procesa en segundo plano y los resultados se recuperan más tarde utilizando el JobId."},
            {"IntentName": "Textract", "Question": "¿Cuándo es preferible usar una operación asíncrona en AWS Textract?", "Response": "Es preferible usar una operación asíncrona para procesar documentos grandes o múltiples documentos, ya que permite manejar el procesamiento pesado en segundo plano y evita tiempos de espera largos en la aplicación cliente."},
            {"IntentName": "Textract", "Question": "¿Cómo se obtienen los resultados de un trabajo asíncrono en AWS Textract?", "Response": "Los resultados de un trabajo asíncrono se obtienen llamando a las funciones get_document_text_detection o get_document_analysis con el JobId proporcionado cuando se inició el trabajo, y opcionalmente utilizando NextToken para paginar a través de los resultados si hay múltiples páginas."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Qué es AWS Comprehend y para qué se utiliza?", "Response": "AWS Comprehend es un servicio de procesamiento de lenguaje natural (NLP) que utiliza aprendizaje automático para descubrir información y relaciones en textos. Se utiliza para tareas como la detección de sentimientos, la extracción de entidades y la identificación de idioma."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Cómo se detecta el idioma predominante de un texto utilizando AWS Comprehend?", "Response": "Utilizando la función detect_dominant_language, que analiza el texto proporcionado y devuelve el código del idioma predominante."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Qué tipos de análisis puede realizar AWS Comprehend en un texto?", "Response": "AWS Comprehend puede realizar varios tipos de análisis, incluyendo detección de sentimientos, extracción de entidades, análisis de frases clave, detección de idioma y categorización de temas."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Qué es una entidad en el contexto de AWS Comprehend y cómo se extraen?", "Response": "Una entidad es un objeto específico, como personas, lugares u organizaciones, mencionado en el texto. Se extraen utilizando la función detect_entities."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Cómo se maneja AWS Comprehend con textos en múltiples idiomas?", "Response": "AWS Comprehend detecta automáticamente el idioma del texto y ajusta su análisis en consecuencia. Para un análisis detallado, el texto puede necesitar ser traducido a un idioma compatible si el soporte para ciertos idiomas es limitado."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Qué es AWS Translate y para qué se utiliza?", "Response": "AWS Translate es un servicio de traducción automática que utiliza aprendizaje profundo para traducir texto de un idioma a otro de manera rápida y precisa."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Cómo se especifican los idiomas de origen y destino en una solicitud de AWS Translate?", "Response": "En una solicitud de traducción, se especifican utilizando los parámetros SourceLanguageCode y TargetLanguageCode, que indican el código del idioma de origen y el código del idioma de destino respectivamente."},
            {"IntentName": "ComprehendTranslate", "Question": "¿Qué limita la precisión de las traducciones realizadas por AWS Translate?", "Response": "La precisión de las traducciones puede verse limitada por la complejidad del texto, la presencia de jerga o terminología técnica, y la calidad del modelo de traducción para los idiomas específicos. AWS Translate mejora constantemente, pero algunas traducciones pueden requerir revisión humana para asegurar la exactitud en contextos específicos."},
            {"IntentName": "Lex", "Question": "¿Qué es AWS Lex?", "Response": "AWS Lex es un servicio de AWS para crear interfaces de conversación en aplicaciones utilizando voz y texto, similar a Amazon Alexa."},
            {"IntentName": "Lex", "Question": "¿Qué es un bot en AWS Lex?", "Response": "Un bot en AWS Lex es una aplicación de conversación que comprende lenguaje natural y puede realizar acciones basadas en la entrada del usuario."},
            {"IntentName": "Lex", "Question": "¿Qué son las intenciones (intents) en AWS Lex?", "Response": "Las intenciones son acciones que el bot puede realizar en respuesta a la entrada del usuario, como responder a preguntas, completar formularios o ejecutar comandos."},
            {"IntentName": "Lex", "Question": "¿Qué es una ranura (slot) en AWS Lex?", "Response": "Una ranura es una variable que captura detalles específicos del usuario dentro de una intención, como fechas, ubicaciones o nombres de productos."},
            {"IntentName": "Lex", "Question": "¿Cómo se entrenan los bots en AWS Lex?", "Response": "Los bots en AWS Lex se entrenan definiendo intenciones, ranuras y frases de muestra que los usuarios podrían decir para activar esas intenciones."},
            {"IntentName": "Lex", "Question": "¿Qué es un alias en AWS Lex?", "Response": "Un alias es una versión del bot que se puede usar para realizar pruebas o implementaciones en producción sin afectar otras versiones del bot."},
            {"IntentName": "Lex", "Question": "¿Cómo se manejan los errores en AWS Lex?", "Response": "Los errores se manejan definiendo mensajes de error personalizados y configurando redirecciones para cuando el bot no puede comprender la entrada del usuario."},
            {"IntentName": "Lex", "Question": "¿Qué es una lambda function en el contexto de AWS Lex?", "Response": "Una función Lambda en AWS Lex puede ser invocada para realizar lógica de negocio personalizada durante el flujo de conversación del bot."},
            {"IntentName": "Lex", "Question": "¿Cómo se integran los bots de AWS Lex con otros servicios de AWS?", "Response": "Los bots de AWS Lex se integran con otros servicios de AWS como AWS Lambda, Amazon DynamoDB y Amazon CloudWatch para extender sus capacidades y almacenar datos."},
            {"IntentName": "Lex", "Question": "¿Qué es una frase de invocación en AWS Lex?", "Response": "Una frase de invocación es una entrada específica del usuario que activa una intención en el bot de AWS Lex."},
            {"IntentName": "Lex", "Question": "¿Cómo se define la salida de texto de un bot en AWS Lex?", "Response": "La salida de texto se define mediante mensajes de respuesta que el bot envía al usuario cuando se activa una intención."},
            {"IntentName": "Lex", "Question": "¿Qué son las frases de muestra en AWS Lex?", "Response": "Las frases de muestra son ejemplos de cómo los usuarios pueden expresar sus intenciones, utilizadas para entrenar el bot."},
            {"IntentName": "Lex", "Question": "¿Qué es el ciclo de vida de una intención en AWS Lex?", "Response": "El ciclo de vida de una intención incluye etapas como iniciación, recolección de ranuras, confirmación y finalización."},
            {"IntentName": "Lex", "Question": "¿Qué es un modelo de lenguaje en AWS Lex?", "Response": "Un modelo de lenguaje en AWS Lex es el conjunto de intenciones, ranuras y frases de muestra que definen cómo el bot comprende y responde a la entrada del usuario."},
            {"IntentName": "Lex", "Question": "¿Cómo se manejan las sesiones en AWS Lex?", "Response": "Las sesiones en AWS Lex permiten mantener el contexto de la conversación a lo largo de múltiples interacciones del usuario."},
            {"IntentName": "Lex", "Question": "¿Qué es un prompt en AWS Lex?", "Response": "Un prompt es un mensaje que el bot envía al usuario para solicitar información necesaria para completar una ranura."},
            {"IntentName": "Lex", "Question": "¿Cómo se pueden probar los bots de AWS Lex?", "Response": "Los bots de AWS Lex se pueden probar utilizando la consola de AWS Lex, herramientas de prueba integradas y mediante aplicaciones clientes."},
            {"IntentName": "Lex", "Question": "¿Qué es un fulfillment en AWS Lex?", "Response": "El fulfillment en AWS Lex es la acción que realiza el bot para completar una intención, que puede involucrar invocar una función Lambda o responder con un mensaje."},
            {"IntentName": "Lex", "Question": "¿Cómo se configura la persistencia de datos en AWS Lex?", "Response": "La persistencia de datos en AWS Lex se configura integrando el bot con servicios de almacenamiento como Amazon DynamoDB para guardar el estado de la conversación y otros datos relevantes."},
            {"IntentName": "Lex", "Question": "¿Qué es el reconocimiento de voz en AWS Lex?", "Response": "El reconocimiento de voz en AWS Lex convierte la entrada de voz del usuario en texto que el bot puede procesar."},
            {"IntentName": "Lex", "Question": "¿Cómo se maneja la multicanalidad en AWS Lex?", "Response": "AWS Lex permite integrar los bots en múltiples canales de comunicación, como aplicaciones móviles, sitios web, servicios de mensajería y dispositivos de voz."},
            {"IntentName": "Lex", "Question": "¿Qué es el umbral de confianza en AWS Lex?", "Response": "El umbral de confianza es una medida de qué tan seguro está el bot de que ha comprendido correctamente la intención del usuario. Se puede ajustar para mejorar la precisión de las respuestas del bot."},
            {"IntentName": "Lex", "Question": "¿Cómo se configuran los mensajes de seguimiento en AWS Lex?", "Response": "Los mensajes de seguimiento se configuran para enviar respuestas adicionales al usuario después de la interacción inicial, manteniendo la conversación fluida."},
            {"IntentName": "Lex", "Question": "¿Qué es una política de devolución en AWS Lex?", "Response": "Una política de devolución define cómo el bot maneja respuestas negativas o no confirmatorias de los usuarios, como pedirles que repitan la información o proporcionar opciones alternativas."},
            {"IntentName": "Lex", "Question": "¿Cómo se integra AWS Lex con AWS CloudWatch?", "Response": "AWS Lex se integra con AWS CloudWatch para monitorear las métricas de los bots, registrar interacciones y analizar el rendimiento y la precisión del bot."},
            {"IntentName": "IdeaTrabajo", "Question": "¿Cuál es la idea del proyecto?", "Response": "La idea principal es desarrollar y comparar dos chatbots utilizando los servicios en la nube de AWS y GCP."},
            {"IntentName": "QueHace", "Question": "¿Qué hace este proyecto?", "Response": "Este proyecto desarrolla dos chatbots utilizando AWS y GCP. Integra múltiples servicios en la nube como Amazon Lex, Lambda, S3, Textract, Comprehend, y Google Dialogflow, Cloud Functions, y Storage para manejar consultas del tutorial de creación de chatbots."},
            {"IntentName": "Objetivos", "Question": "¿Cuáles son los objetivos del proyecto?", "Response": "- Evaluar la eficacia y eficiencia de las herramientas y servicios proporcionados por AWS y GCP para el desarrollo de chatbots. - Proporcionar una guía detallada y práctica para la implementación de chatbots en entornos empresariales utilizando tecnologías de computación en la nube."},
            {"IntentName": "ConceptosTeoricos", "Question": "¿Qué conceptos teóricos se utilizan en el proyecto?", "Response": "Los conceptos teóricos más destacables de este proyecto residen en el procesamiento del lenguaje natural(NLP en adelante) el cual es una subdisciplina de la inteligencia artificial que se dedica a la interacción entre las computadoras y los lenguajes humanos."},
            {"IntentName": "TecnicasHerramientas", "Question": "¿Qué técnicas y herramientas se han utilizado?", "Response": "Estas son las herramientas utilizadas en el proyecto: Scrum, Git, GitHub Desktop, GitHub, Email, Microsoft Teams, Visual Studio Code, Texmaker, Pylint, Coverage, HTML, CSS, Amazon Lex, AWS Lambda, Amazon S3, Amazon Textract, Amazon Comprehend, Amazon Translate, Amazon DynamoDB, Dialogflow, Cloud Functions y Cloud Storage."},
            {"IntentName": "TrabajosRelacionados", "Question": "¿Qué trabajos similares existen?", "Response": "Estos son los trabajos similares y en los que se ha basado el proyecto: Estudio sobre la creación de un asistente virtual interactivo para la programación en C utilizando Amazon Lex y Lambda, Trabajo en GitHub sobre la extracción de insights conversacionales de facturas con Amazon Textract, Amazon Comprehend y Amazon Lex, Documentación proporcionada por AWS, Trabajo sobre la creación de un chatbot utilizando Dialogflow y Google Cloud Functions."},
            {"IntentName": "Conclusiones", "Question": "¿Cuáles son las conclusiones del proyecto?", "Response": "A lo largo de este proyecto, se han desarrollado dos chatbots utilizando los servicios en la nube de AWS y GCP. Estos chatbots integran servicios avanzados como Amazon Lex, Lambda, S3, Textract, Comprehend, Translate, y DynamoDB, así como Dialogflow, Cloud Functions y Cloud Storage. Se ha adquirido un profundo conocimiento sobre microservicios, integración de múltiples servicios en la nube y mejores prácticas para el despliegue de chatbots."},
            {"IntentName": "LineasFuturas", "Question": "¿Cuáles son las líneas de trabajo futuras?", "Response": "En un futuro, se puede mejorar el proyecto en estos ámbitos: Creación de Nuevos Intents, Integración de un Mayor Número de Servicios, Mejora de la Lógica en Funciones Lambda, Implementación de Aprendizaje Automático."},
            {"IntentName": "GitHubInfo", "Question": "¿Dónde puedo encontrar el código en GitHub?", "Response": "Lo puedes encontrar desde este enlace de github:"},
            {"IntentName": "GitHubInfo", "Question": "¿Dónde está la memoria y los anexos?", "Response": "Lo puedes encontrar desde este enlace de github:"},
            {"IntentName": "GitHubInfo", "Question": "¿Cómo accedo a los documentos del proyecto?", "Response": "Lo puedes encontrar desde este enlace de github:"},
            {"IntentName": "EstructuraMemoria", "Question": "¿Cuál es la estructura de la memoria del proyecto?", "Response": "La memoria se divide en: Introducción, Objetivos del proyecto, Conceptos teóricos, Técnicas y herramientas, Aspectos relevantes del desarrollo, Trabajos relacionados, Conclusiones y líneas de trabajo futuras, Plan del proyecto software, Especificación de requisitos del software, Especificación de diseño, Manual del programador, Manual de usuario."},
            {"IntentName": "Metodologias", "Question": "¿Qué metodologías se han utilizado?", "Response": "Se ha seguido durante todo el proyecto un desarrollo iterativo basado en Scrum con Sprints"},
            {"IntentName": "Sprints", "Question": "¿Cuántos sprints se realizaron?", "Response": "Se han realizado 7 sprints y una fase inicial."},
        ]
        
        for response in responses:
            table.put_item(Item=response)
        
        #=================================#
        #Introducción de pasos del tutorial
        steps = {1: 2, 2: 1, 3: 1, 4: 5, 5: 2, 6: 3, 7: 1}
        
        responses = []
        
        for step, substeps in steps.items():
            for substep in range(1, substeps + 1):
                entry = {
                    "IntentName": "tutorial",
                    "Question": f"{step}_{substep}",
                    "Response": f"Paso{step}_Subpaso{substep}.txt"
                }
                responses.append(entry)
                
        for response in responses:
            table.put_item(Item=response)
        
        print("Datos cargados exitosamente.")
    except Exception as e:
        print(f"Error al insertar datos en DynamoDB: {e}")
        